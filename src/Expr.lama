-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalOp (op, n1, n2) {
  case op of
      "+"  -> n1 +  n2
    | "-"  -> n1 -  n2
    | "*"  -> n1 *  n2
    | "/"  -> n1 /  n2
    | "%"  -> n1 %  n2
    | "<"  -> n1 <  n2
    | ">"  -> n1 >  n2
    | "<=" -> n1 <= n2
    | ">=" -> n1 >= n2
    | "==" -> n1 == n2
    | "!=" -> n1 != n2
    | "&&" -> n1 && n2
    | "!!" -> n1 !! n2
  esac
}

public fun evalExpr (st, expr) {
  case expr of
      Var   (x) -> st (x)
    | Const (n) -> n
    | Binop (op, e1, e2) ->
        var n1 = evalExpr(st, e1);
        var n2 = evalExpr(st, e2);
        evalOp (op, n1, n2)
  esac
}
