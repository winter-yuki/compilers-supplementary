-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDefs (st, defs) {
  foldl (
    fun (st, def) {
      case def of
        Var (names) -> st.addNames (names)
      | Fun (name, args, body) -> st.addFunction (name, args, body)
      esac
    },
    st,
    defs
  )
}

fun addArgs (st, names, vals) {
  foldl (
    fun (st, [name, v]) {
      st.addName (name, v)
    },
    st,
    zip (names, vals)
  )
}

fun evalBuiltinFlip (name, args, c@[st, w]) {
  case evalBuiltin (name, args, w) of
    [res, w] -> [[st, w], res]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Assn (x, e) ->
      case evalList (c, {x, e}) of
        [[st, w], {Ref (x), n}] -> [[st <- [x, n], w], n]
      | [c, {ElemRef (arr, index), n}] -> [c, arr [index] := n]
      esac
  | Set (name, e) -> eval (c, Assn (Ref (name), e))
  | Seq (e1, e2) ->
      case evalList (c, {e1, e2}) of
        [c, {_, n}] -> [c, n]
      esac
  | Skip -> [c, Bot]
  | If (cond, t, e) ->
      case eval (c, cond) of
        [c, cond] -> eval (c, if cond then t else e fi)
      esac
  | While (cond, b) ->
      var cc = c;
      while case eval (cc, cond) of [c, n] -> cc := c; n esac do
        case eval (cc, b) of [c, n] -> cc := c; n esac
      od;
      [cc, Bot]
  | DoWhile (b, cond) ->
      var cc = c;
      do
        case eval (cc, b) of [c, n] -> cc := c; n esac
      while case eval (cc, cond) of [c, n] -> cc := c; n esac od;
      [cc, Bot]
  | Var (x) -> [c, st.lookup (x)]
  | Ref (x) -> [c, Ref (x)]
  | Const (n) -> [c, n]
  | Binop (op, l, r) ->
      case evalList (c, {l, r}) of
        [c, {l, r}] -> [c, evalOp (op, l, r)]
      esac
  | Scope (defs, expr) ->
      case eval ([addDefs (enterScope (st), defs), w], expr) of
        [[st, w], n] -> [[st.leaveScope, w], n]
      esac
  | Call (funName, argExprs) ->
      var oldSt = st;
      case st.lookup (funName) of Fun (argNames, body) ->
        case evalList (c, argExprs) of [[st, w], argVals] ->
          case body of
            External -> evalBuiltinFlip (funName, argVals, c)
          | _ ->
            case eval ([addArgs (enterFunction (st), argNames, argVals), w], body) of
              [[st, w], res] -> [[leaveFunction (oldSt, st.getGlobal), w], res]
            esac
          esac
        esac
      esac
  | Ignore (e) ->
      case eval (c, e) of
        [c, n] -> [c, Bot]
      esac
  | String (s) -> [c, s]
  | Array (exprs) ->
      case evalList (c, exprs) of
        [c, vals] -> [c, listArray (vals)]
      esac
  | Elem (arrExpr, indexExpr) ->
      case evalList (c, {arrExpr, indexExpr}) of
        [c, {arr, index}] ->
          [c, case arr of
            Sexp (_, arr) -> arr [index]
          | _ -> arr [index]
          esac]
      esac
  | ElemRef (arrExpr, indexExpr) ->
      case evalList (c, {arrExpr, indexExpr}) of
        [c, {arr, index}] -> [c, ElemRef (arr, index)]
      esac
  | Sexp (name, exprs) ->
      case evalList (c, exprs) of
        [c, vals] -> [c, Sexp (name, listArray (vals))]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
