-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

var debug = false;

fun log(s) {
  if debug then
    printf (s)
  fi
}

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }

    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }

  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Evaluates single stack machine instruction
  fun evalInsn (c@[s, cs, st, w], insn, insns) {
    case insn of
      JMP (l) -> [Some (env.fromLabel (l)), c]
    | CJMP (cond, l) ->
        case s of x:s ->
          var z = case cond of "z" -> 1 | "nz" -> 0 esac;
          if x == z
          then [None, [s, cs, st, w]]
          else [Some (env.fromLabel (l)), [s, cs, st, w]]
          fi
        esac
    | END ->
        case cs of
          {}           -> [Stop, c]
        | [st, p] : cs -> [Some (p), [s, cs, st, w]]
        esac
    | CALL (fLabel, nArgs) ->
        [Some (fromLabel (env, fLabel)), [s, [st, insns] : cs, st, w]]
    | insn -> [None, case insn of
        BINOP  (op) -> case s of y:x:s -> [evalOp (op, x, y) : s, cs, st, w] esac
      | CONST  (n)  -> [n:s, cs, st, w]
      | LD     (x)  -> [st.lookup (x) : s, cs, st, w]
      | LDA    (x)  -> [Ref (x) : s, cs, st, w]
      -- | ST     (x)  -> case s of z:s -> [s, cs, assign (st, x, z); st, w] esac
      | STI         -> case s of v:Ref (x):s -> [v:s, cs, assign (st, x, v); st, w] esac
      | LABEL  (l)  -> c
      | DROP        -> case s of {} -> c | _:s -> [s, cs, st, w] esac
      | GLOBAL (x)  -> assign(st, Glb (x), 0); c
      | BEGIN  (funName, nArgs, nLocals) ->
          st := makeState (nArgs, nLocals);
          case take (s, nArgs) of [s, args] ->
            foldl (fun (i, arg) {assign (st, Arg (i), arg); i + 1}, 0, args);
            [s, cs, st, w]
          esac
      | BUILTIN (funName, nArgs) ->
          case take (s, nArgs) of [s, args] ->
            case evalBuiltin (funName, args, w) of [res, w] ->
              [res : s, cs, st, w]
            esac
          esac
      | STRING (ss) -> [ss : s, cs, st, w]
      | ARRAY (n) ->
          case take (s, n) of [_:s, elems] ->
            [listArray (elems) : s, cs, st, w]
          esac
      | ELEM ->
          case s of index : arr : s ->
            [arr [index] : s, cs, st, w]
          esac
      | STA ->
          case s of value : index : arr : s ->
            [(arr [index] := value) : s, cs, st, w]
          esac
      | SEXP (tag, nValues) ->
          case take (s, nValues) of [_:s, values] ->
            [listArray (values) : s, cs, st, w]
          esac
      esac]
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (env, c@[s, ct, st, w], insns) {
    case insns of
      {} -> c
    | insn : insns ->
        case evalInsn (c, insn, insns) of
          [None, c]         -> eval (env, c, insns)
        | [Some (insns), c] -> eval (env, c, insns)
        | [Stop, c]         -> c
        esac
    esac
  }

  eval (env, [{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Compile expression with its own label after.
  fun compileL (env, expr) {
    case env.genLabel of [lab, env] ->
      case compile (lab, env, expr) of [labUsed, env, code] ->
        [env, code <+> label (lab, labUsed)]
      esac
    esac
  }

  fun compileL2 (env, e1, e2) {
    case compileL (env, e1) of [env, code1] ->
      case compileL (env, e2) of [env, code2] ->
        [env, code1 <+> code2]
      esac
    esac
  }

  fun compileMany (env, stmts) {
    foldl (fun ([env, code], stmt) {
      case compileL (env, stmt) of [env, newCode] ->
        [env, code <+> newCode]
      esac
    }, [env, emptyBuffer ()], stmts)
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVal (env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)        ->
        case compileL (env, e) of
          [env, code] -> [false, env, code <+ DROP]
        esac
    | Assn   (x, e)     ->
        case compileL2 (env, x, e) of
          [env, code] -> [false, env, code
            <+ case x of ElemRef (_, _) -> STA | _ -> STI esac]
        esac
    | Set (name, e) -> compile (lab, env, Assn (Ref (name), e))
    | Binop  (op, l, r) ->
        case compileL2 (env, l, r) of
          [env, code] -> [false, env, code <+ BINOP (op)]
        esac
    | Seq    (s1, s2)   ->
        case compileL (env, s1) of [env, code1] ->
          case compile (lab, env, s2) of [used, env, code2] ->
            [used, env, code1 <+> code2]
          esac
        esac
    | If     (c, t, e)  ->
        case env.genLabel of [elseLabel, env] ->
          case compileL (env, c) of [env, codeC] ->
            case compile (lab, env, t) of [_, env, codeT] ->
              case compile (lab, env, e) of [_, env, codeE] ->
                [true, env,
                  codeC
                    <+ CJMP ("z", elseLabel)
                    <+> codeT
                    <+ JMP (lab)
                    <+ LABEL (elseLabel)
                    <+> codeE]
              esac
            esac
          esac
        esac
    | While   (c, b)    ->
        case env.genLabels (2) of [condLabel, bodyLabel, env] ->
          case compileL (env, c) of [env, codeC] ->
            case compile (condLabel, env, b) of [_, env, codeB] ->
              [false, env,
                singletonBuffer (JMP (condLabel))
                  <+ LABEL (bodyLabel)
                  <+> codeB
                  <+ LABEL (condLabel)
                  <+> codeC
                  <+ CJMP ("nz", bodyLabel)]
            esac
          esac
        esac
    | DoWhile (s, c)     -> compile (lab, env, Seq (s, While (c, s)))
    | Scope (defs, expr) ->
        var globalsCode;
        env := env.beginScope;
        env := foldl (fun (env, def) {
          case def of
            Var (names) -> env.addVars (names)
          | Fun (name, argNames, body) ->
              case env.genFunLabel (name) of [label, env] ->
                env.addFun (name, label, argNames.size)
              esac
          esac
        }, env, defs);
        globalsCode := foldl (fun (code, def) {
          case def of
            Var (names) ->
              if env.isGlobal == 0 then code else
                foldl (fun (code, name) {code <+ GLOBAL (name)}, code, names)
              fi
          | _ -> code
          esac
        }, emptyBuffer (), defs);
        env := foldl(fun (env, def) {
          case def of
            Fun (name, argNames, body) ->
              case env.lookupFun (name) of Fun (label, _) ->
                env.rememberFun (label, argNames, body)
              esac
          | _ -> env
          esac
        }, env, defs);
        case compile (lab, env, expr) of [used, env, code] ->
          [used, env.endScope, globalsCode <+> code]
        esac
    | Call (name, args) ->
        case env.lookupFun (name) of Fun (label, nArgs) ->
          case compileMany (env, args) of [env, argsCode] ->
            if args.size != nArgs
            then failure ("Wrong number of arguments: %s expects %d but got %d\n", name, nArgs, args.size)
            else [false, env, argsCode
              <+ if label [0] == '$' then BUILTIN (name, nArgs) else CALL (label, nArgs) fi]
            fi
          esac
        esac
    | String (s) -> [false, env, singletonBuffer (STRING (s))]
    | Array (exprs) ->
        case compileMany (env, exprs) of [env, elemsCode] ->
          [false, env, emptyBuffer()
            <+  CONST (size (exprs)) -- to generate runtime Varray call properly in X86
            <+> elemsCode
            <+  ARRAY (size (exprs))]
        esac
    | Elem (arrExpr, indexExpr) ->
        case compileMany (env, {arrExpr, indexExpr}) of
          [env, code] -> [false, env, code <+ ELEM]
        esac
    | ElemRef (arrExpr, indexExpr) ->
        case compileMany (env, {arrExpr, indexExpr}) of
          [env, code] -> [false, env, code]
        esac
    | Sexp (tag, exprs) ->
        case compileMany (env, exprs) of [env, code] ->
          [false, env, emptyBuffer ()
            <+  CONST (size (exprs) + 1)
            <+> code
            <+  SEXP (tag, size (exprs))]
        esac
    esac
  }

  fun compileFunction (env, Fun (fLabel, argNames, body, state)) {
    var res;
    log (sprintf ("compileFunction on %s\n", fLabel));
    env := beginFun (env, state);
    env := foldl (fun (env, name) {addArg (env, name)}, env, argNames);
    res := case compileL (env, body) of [env, code] ->
      [env, emptyBuffer ()
        <+  LABEL (fLabel)
        <+  BEGIN (fLabel, argNames.size, env.getLocals)
        <+> code
        <+  END]
    esac;
    log (sprintf ("end compileFunction on %s\n", fLabel));
    res
  }

  fun compileFunctions (env) {
    var code = emptyBuffer ();
    var funs;
    do
      var envCode;
      case env.getFuns of [newFuns, newEnv] ->
        funs := newFuns;
        env := newEnv
      esac;
      envCode := foldl (fun ([env, code], f) {
        case compileFunction (env, f) of [env, newCode] ->
          [env, code <+> newCode]
        esac
      }, [env, emptyBuffer ()], funs);
      case envCode of [newEnv, newCode] ->
        env := newEnv;
        code := code <+> newCode
      esac
    while funs.size od;
    code
  }

  var env = initCompEnv ()
    .beginScope
    .addFun ("read"  , "$read"  , 0)
    .addFun ("write" , "$write" , 1)
    .addFun ("length", "$length", 1);
  log (sprintf ("compileSM\n"));
  case compileL (env, stmt) of [env, code] ->
    code := getBuffer $ emptyBuffer ()
      <+  LABEL ("main")
      <+  BEGIN ("main", 0, getLocals (env))
      <+> code
      <+  END
      <+> compileFunctions (env);
    log (sprintf ("\ncode:\n%s\n\n", showSM (code)));
    code
  esac
}
